name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Ensure static directory exists
        run: mkdir -p app/static

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.33.1
          legacy: true

      - name: Build application image
        run: docker compose build
      
      - name: Start database service
        run: docker compose up -d db
        
      - name: Wait for database to be ready
        run: |
          echo "Waiting for database to be ready..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker compose exec -T db pg_isready -U postgres; then
              echo "Database is ready!"
              break
            fi
            echo "Database not ready yet. Waiting..."
            sleep 2
            timeout=$((timeout-2))
          done
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for database"
            exit 1
          fi
      
      - name: Run unit tests inside Docker
        run: docker compose run --rm test pytest tests/ -v --disable-warnings
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
      
      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety flake8
      
      - name: Check code formatting with flake8
        run: flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
      
      - name: Run Bandit security scan (code vulnerabilities)
        run: bandit -r app/ -f json -o bandit-results.json || true
      
      - name: Check if requirements.txt exists
        id: check_requirements
        run: |
          if [ -f requirements.txt ]; then
            echo "requirements_exist=true" >> $GITHUB_OUTPUT
          else
            echo "requirements_exist=false" >> $GITHUB_OUTPUT
            echo "requirements.txt not found, skipping Safety scan"
          fi
      
      - name: Run Safety dependency scan
        if: steps.check_requirements.outputs.requirements_exist == 'true'
        run: safety check -r requirements.txt --json > safety-results.json || true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json

  publish:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure static directory exists
        run: mkdir -p app/static
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.23.3
          legacy: true
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: maltsevvm/fastapi-app
          tags: |
            type=ref,event=branch  # Tag with branch name
            type=semver,pattern={{version}}  # Tag with semantic version from git tag
            type=semver,pattern={{major}}.{{minor}}  # Tag with major.minor
            type=sha,format=short  # Tag with short commit SHA
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}  # Latest tag only for main/master

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Notify on success
        if: success()
        run: |
          echo "CI/CD pipeline completed successfully!"
          echo "Image pushed to Docker Hub: maltsevvm/fastapi-app"
          # Здесь можно добавить интеграцию с системами уведомлений (Slack, Email и т.д.)
